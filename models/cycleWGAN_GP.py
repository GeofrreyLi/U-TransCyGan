from ast import arg
from models.discriminator import define_dis
from models.generator import define_gen
from models.GANLoss import GANLoss
from models.GANLoss import cal_gradient_penalty

import itertools
from torch import nn
import torch
import torch.nn.functional as F


class CycleWAN_GP(nn.Module):
    def __init__(self, args, image_size=(96, 128, 96), in_channel=1, num_blocks_dis = [2, 2, 5, 6, 2], channels_dis = [32, 64, 96, 192, 368],
     num_blocks_gen =[2, 2, 6, 12, 2], channels_gen = [64, 96, 192, 384, 768], device=None, gpus=None) -> None:
        super().__init__()
        self.args = args
        self.device = device
        self.image_size = image_size
        #define generator and discriminator
        self.netG_A = define_gen(args, image_size, num_blocks_gen, channels_gen, in_channel)
        self.netG_B = define_gen(args, image_size, num_blocks_gen, channels_gen, in_channel)
        self.netD_A = define_dis(args, image_size, num_blocks_dis, channels_dis, in_channel)
        self.netD_B = define_dis(args, image_size, num_blocks_dis, channels_dis, in_channel)
        if gpus != None:
            self.netG_A = nn.DataParallel(self.netG_A, device_ids=gpus, output_device=gpus[0])
            self.netG_B = nn.DataParallel(self.netG_B, device_ids=gpus, output_device=gpus[0])
            self.netD_A = nn.DataParallel(self.netD_A, device_ids=gpus, output_device=gpus[0])
            self.netD_B = nn.DataParallel(self.netD_B, device_ids=gpus, output_device=gpus[0])
        self.netG_A.to(device)
        self.netG_B.to(device)
        self.netD_A.to(device)
        self.netD_B.to(device)
        # define loss
        self.criterionIdt = nn.L1Loss()
        self.criterionCycle = nn.L1Loss()
        self.criterionGAN = GANLoss('wgangp')
        # define optimizer
        self.optimizers=[]
        self.optimizer_G = torch.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()), lr=args.lr, betas=(args.beta1, 0.999))
        self.optimizer_D = torch.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()), lr=args.lr, betas=(args.beta1, 0.999))
        self.optimizers.append(self.optimizer_G)
        self.optimizers.append(self.optimizer_D)
    
    def set_requires_grad(self, nets, requires_grad=False):
        """Set requies_grad=Fasle for all the networks to avoid unnecessary computations
        Parameters:
            nets (network list)   -- a list of networks
            requires_grad (bool)  -- whether the networks require gradients or not
        """
        if not isinstance(nets, list):
            nets = [nets]
        for net in nets:
            if net is not None:
                for param in net.parameters():
                    param.requires_grad = requires_grad

    def set_input(self, input_A, input_B):
        """Unpack input data from the dataloader and perform necessary pre-processing steps.
        Parameters:
            input (dict): include the data itself and its metadata information.
        The option 'direction' can be used to swap domain A and domain B.
        """
        if input_A.shape is not self.image_size:
            input_A =  F.interpolate(input_A, size=(96, 128, 96), mode='nearest')
        if input_B.shape is not self.image_size:
            input_B =  F.interpolate(input_A, size=(96, 128, 96), mode='nearest')
    
        self.real_A = input_A.to(self.device)
        self.real_B = input_B.to(self.device)
    
    def forward(self):
        """Run forward pass; called by both functions <optimize_parameters> and <test>."""
        self.fake_B = self.netG_A(self.real_A)  # G_A(A)
        self.rec_A = self.netG_B(self.fake_B)   # G_B(G_A(A))
        self.fake_A = self.netG_B(self.real_B)  # G_B(B)
        self.rec_B = self.netG_A(self.fake_A)   # G_A(G_B(B))

    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator
        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator
        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)
        # Fake
        pred_fake = netD(fake.detach())
        loss_D_fake = self.criterionGAN(pred_fake, False)
        # Combined loss and calculate gradients
        loss_D = (loss_D_real + loss_D_fake) * 0.5
        loss_D.backward()
        return loss_D

    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B = self.fake_B_pool.query(self.fake_B)
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)

    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A = self.fake_A_pool.query(self.fake_A)
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)

    def backward_G(self):
        """Calculate the loss for generators G_A and G_B"""
        lambda_idt = self.args.lamda_identity
        lambda_A = self.args.lamda_cycle
        lambda_B = self.args.lamda_cycle
        # Identity loss
        if lambda_idt > 0:
            # G_A should be identity if real_B is fed: ||G_A(B) - B||
            self.idt_A = self.netG_A(self.real_B)
            self.loss_idt_A = self.criterionIdt(self.idt_A, self.real_B) * lambda_B * lambda_idt
            del self.idt_A
            # G_B should be identity if real_A is fed: ||G_B(A) - A||
            self.idt_B = self.netG_B(self.real_A)
            self.loss_idt_B = self.criterionIdt(self.idt_B, self.real_A) * lambda_A * lambda_idt
            del self.idt_B
        else:
            self.loss_idt_A = 0
            self.loss_idt_B = 0

        # GAN loss D_A(G_A(A))
        self.loss_G_A = self.criterionGAN(self.netD_A(self.fake_B), True)
        # GAN loss D_B(G_B(B))
        self.loss_G_B = self.criterionGAN(self.netD_B(self.fake_A), True)
        # Forward cycle loss || G_B(G_A(A)) - A||
        self.loss_cycle_A = self.criterionCycle(self.rec_A, self.real_A) * lambda_A
        # Backward cycle loss || G_A(G_B(B)) - B||
        self.loss_cycle_B = self.criterionCycle(self.rec_B, self.real_B) * lambda_B
        # combined loss and calculate gradients
        self.loss_G = self.loss_G_A + self.loss_G_B + self.loss_cycle_A + self.loss_cycle_B + self.loss_idt_A + self.loss_idt_B
        self.loss_G.backward()

    def optimize_parameters(self):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # forward
        self.forward()      # compute fake images and reconstruction images.
        # G_A and G_B
        self.set_requires_grad([self.netD_A, self.netD_B], False)  # Ds require no gradients when optimizing Gs
        self.optimizer_G.zero_grad()  # set G_A and G_B's gradients to zero
        self.backward_G()             # calculate gradients for G_A and G_B
        self.optimizer_G.step()       # update G_A and G_B's weights
        # D_A and D_B
        self.set_requires_grad([self.netD_A, self.netD_B], True)
        self.optimizer_D.zero_grad()   # set D_A and D_B's gradients to zero
        self.backward_D_A()      # calculate gradients for D_A
        self.backward_D_B()      # calculate graidents for D_B
        self.optimizer_D.step()  # update D_A and D_B's weights

def create_model(args, device, gpus):
    return CycleWAN_GP(args=args, device=device, gpus=gpus)
        
